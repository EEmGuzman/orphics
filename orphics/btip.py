import numpy as np



def inpaint_map(imap,ras,decs,radii_tags,radii_dict,tot_power_2d,seed=None):
    """
    Brute-force inpaints a map in circular regions.

    imap -- (Ny,Nx) enmap
    ras  -- list of RA of centers in degrees, length M
    decs -- list of DEC of centers in degrees, length M
    radii -- list of strings specifying radius tag for each object, length M
    radii_dict -- dict mapping radius tag string to float value of radius in arcminutes, length K
                  Most expensive operation scales with K.
    tot_power_2d -- total power in map in physical units (e.g. uK^2 radians)

    """


    class G:
        pass

    geometries = {}
    tags = radii_dict.keys()
    for key in tags:
        geometries[key] = calculate_circular_geometry(shape,wcs)




def prepare_circular_mask(stamp,hole_arcminutes):
    '''This routine accepts a stamp as a 2D array. The region
    within hole_arcminutes is masked, and the mean of the region outside it
    is subtracted from the stamp. It returns the masked stamp and the value
    of the mean of the unmasked region that needs to be added back after
    inpainting.

    '''

    stamp[stamp.modrmap()<hole_arcminutes*np.pi/180./60.] = np.nan
    unmaskedMean = np.nanmean(stamp)
    stamp -= unmasked_mean

    return stamp, unmasked_mean


def get_geometry_shapes(shape,wcs,hole_arcminutes):
    modrmap = enmap.modrmap(shape,wcs)
    m1 = np.where(modrmap.reshape(-1)<hole_arcminutes*np.pi/180./60.)[0]
    m2 = np.where(modrmap.reshape(-1)>=hole_arcminutes*np.pi/180./60.)[0]
    return m1.size,m2.size


def make_circular_geometry(shape,wcs,context_arcmin,hole_arcmin,power2d,buffer_factor = 2,verbose=False,downsample=True):
    '''Makes the circular geometry matrices that need to be pre-calculated for later inpainting.

    Arguments
    ---------

    input2DPower - ndarray containing 2D power spectrum of a map. It need not already have been
                   downsampled to the shape of the stamp cutout
    inputLy
    inputLx      - the fourier wavenumbers corresponding to the y and x axes of the stamp cutout
    stampArc     - the width in arcminutes of the stamp cut out
    stampPxX      - the pixel width in arcminutes of the stamp cut out in the x direction
    stampPxY      - the pixel width in arcminutes of the stamp cut out in the y direction
    holeArc      - the radius of the circular hole in arcminutes
    bufferFactor - the pixel covariance matrix will be calculated on a periodic stamp larger by this
                   factor
    verbose      - True if you want more commentary

    Returns
    -------

    meanMul      - a matrix that has shape (nh,nc) where nh is the number of pixels in the hole and
                   nc is the number of pixels outside (in the "context"). It should be multiplied
                   by a vector (nc) containing pixels outside to get a vector (nh) for the mean
                   value of the pixels inside
    covRoot      - a (nh,nh) sqrt(covariance matrix) that can be used to generate a random realization
                   in the hole. This can be generated by multiplying the sqrt of cov by a vector (nh)
                   of standard normal variables. The generated vector should be added to the mean value
                   obtained using meanMul
    pcov         - the pixel-pixel covariance matrix used in intermediate steps, if you want to re-use it
    targetTemplate - a liteMap template of the stamp cutout
    m1           - a boolean array that can be used to select the hole region
    m2           - a boolean array that can be used to select the context region


    '''

    arc = context_arcmin
    res = maps.resolution(shape,wcs)*60.*180./np.pi
                                                      
    bshape,bwcs = maps.rect_geometry(width_arcmin=arc*bufferFactor,px_res_arcmin=res)
    tshape,twcs = maps.rect_geometry(width_arcmin=arc,px_res_arcmin=res)
    sny,snx = tshape
    modlmap = enmap.modlmap(bshape,bwcs)

    print "Downsampling..."
    from enlib.resample import resample_fft
    Niy,Nix = inputLy.size,inputLx.size
    Noy,Nox = ly.size,lx.size
    outPower = resample_fft(input2DPower,factors=[float(Noy)/Niy,float(Nox)/Nix],axes=[-2,-1])

    print "Starting slow part..."
    d = maps.diagonal_cov(down_power_2d)
    pcov = maps.pixcov(shape,wcs,d)[:sny,:snx,:sny,:snx]
    xMap,yMap,modRMap,xx,yy = fmaps.getRealAttributes(targetTemplate)
    m1 = np.where(modRMap.reshape(-1)<holeArc*np.pi/180./60.)[0]
    m2 = np.where(modRMap.reshape(-1)>=holeArc*np.pi/180./60.)[0]

    meanMul, cov = getGeometry(pcov.reshape(sny*snx,sny*snx),m1,m2)
    covRoot = eigPow(cov,0.5)

    return meanMul, covRoot, pcov, targetTemplate, m1, m2


def fill_hole(masked_liteMap_stamp,meanMatrix,holeArc,m1,m2,covRoot=None):
    '''Returns the result of an inpaint operation as a 1d unraveled vector

    Arguments
    ---------

    masked_liteMap_stamp - the cutout stamp that contains a masked hole and
                           unmasked context
    meanMatrix           - an (nh,nc) matrix. See docs for make_circular_geometry
    holeArc              - radius of masked hole in arcminutes
    m1                   - a 1d boolean selecting the hole region on an unraveled stamp
    m2                   - a 1d boolean selecting the context region on an unraveled stamp
    covRoot              - the square root of the covariance matrix inside the hole. See
                           docs for make_circular_geometry. If unspecified, the random
                           realization returned is zero.

    Returns
    -------

    mean  -  a 1d (nh) vector containing the mean inpainted value constrained according
             to the context
    rand  -  a 1d (nh) vector containing a random realization inside the hole
    sim   -  a 1d (nh) vector containing the sum of mean and rand

    '''

    mean = np.dot(meanMatrix,masked_liteMap_stamp.data.reshape(-1)[m2])
    r = np.random.normal(0.,1.,size=(m1.size))
    if covRoot is not None:
        rand = np.dot(covRoot,r)
    else:
        rand = 0.
    sim = mean + rand
    return mean, rand, sim

                                                      
